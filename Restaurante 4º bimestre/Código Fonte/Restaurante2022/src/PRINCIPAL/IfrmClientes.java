package PRINCIPAL;

import CODIGOINTERNO.CICliente;
import CODIGOINTERNO.CIFuncionario;
import CODIGOINTERNO.CIRegistro;
import VARIAVEIS.Cliente;
import VARIAVEIS.DataHora;
import VARIAVEIS.Funcionario;
import VARIAVEIS.Registro;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class IfrmClientes extends javax.swing.JInternalFrame {

    private static IfrmClientes ifrmClientes;
    Cliente c1 = new Cliente();
    CICliente cic = new CICliente();
    Registro r = new Registro();
    CIRegistro reg = new CIRegistro();
    DataHora dh = new DataHora();
    CIFuncionario cif = new CIFuncionario();
    Funcionario f = new Funcionario();

    public static IfrmClientes getInstancia() {
        if (ifrmClientes == null) {
            ifrmClientes = new IfrmClientes();
        }
        return ifrmClientes;
    }

    public IfrmClientes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCliente = new javax.swing.JPanel();
        pnlCadastroCliente = new javax.swing.JPanel();
        lblCpf = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        lblCelular = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblCidade = new javax.swing.JLabel();
        lblRua = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtCelular = new javax.swing.JFormattedTextField();
        txtEmail = new javax.swing.JTextField();
        txtCidade = new javax.swing.JTextField();
        txtRua = new javax.swing.JTextField();
        txtCpf = new javax.swing.JFormattedTextField();
        btnInserir = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JToggleButton();
        pnlTabelaClientes = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        pnlCliente.setBackground(new java.awt.Color(51, 0, 255));

        pnlCadastroCliente.setBackground(new java.awt.Color(204, 255, 204));
        pnlCadastroCliente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cadastro de clientes:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(51, 255, 51))); // NOI18N

        lblCpf.setText("CPF:");

        lblNome.setText("Nome:");

        lblCelular.setText("Celular:");

        lblEmail.setText("E-mail:");

        lblCidade.setText("Cidade:");

        lblRua.setText("Rua:");

        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });
        txtNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomeKeyReleased(evt);
            }
        });

        try {
            txtCelular.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("## (##) 9####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        txtCidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCidadeKeyReleased(evt);
            }
        });

        txtRua.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRuaKeyReleased(evt);
            }
        });

        try {
            txtCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCpfActionPerformed(evt);
            }
        });

        btnInserir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONES/Confirmar.png"))); // NOI18N
        btnInserir.setText("Inserir");
        btnInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirActionPerformed(evt);
            }
        });

        btnAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONES/Alterar.png"))); // NOI18N
        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnRemover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONES/Apagar.png"))); // NOI18N
        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONES/Limpar.png"))); // NOI18N
        btnLimpar.setText("Limpar campos");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONES/Pesquisar.png"))); // NOI18N
        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCadastroClienteLayout = new javax.swing.GroupLayout(pnlCadastroCliente);
        pnlCadastroCliente.setLayout(pnlCadastroClienteLayout);
        pnlCadastroClienteLayout.setHorizontalGroup(
            pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCadastroClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCadastroClienteLayout.createSequentialGroup()
                        .addComponent(lblNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNome))
                    .addGroup(pnlCadastroClienteLayout.createSequentialGroup()
                        .addComponent(lblCpf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCpf))
                    .addGroup(pnlCadastroClienteLayout.createSequentialGroup()
                        .addComponent(lblRua)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRua))
                    .addGroup(pnlCadastroClienteLayout.createSequentialGroup()
                        .addComponent(lblCelular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCelular))
                    .addGroup(pnlCadastroClienteLayout.createSequentialGroup()
                        .addComponent(lblEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmail))
                    .addGroup(pnlCadastroClienteLayout.createSequentialGroup()
                        .addComponent(lblCidade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCidade))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCadastroClienteLayout.createSequentialGroup()
                        .addGroup(pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnInserir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                        .addGroup(pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(49, 49, 49)))
                .addContainerGap())
            .addGroup(pnlCadastroClienteLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(btnPesquisar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlCadastroClienteLayout.setVerticalGroup(
            pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCadastroClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCpf)
                    .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNome)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCelular)
                    .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCidade)
                    .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRua)
                    .addComponent(txtRua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInserir)
                    .addComponent(btnAlterar))
                .addGap(18, 18, 18)
                .addGroup(pnlCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemover)
                    .addComponent(btnLimpar))
                .addGap(26, 26, 26)
                .addComponent(btnPesquisar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cpf do cliente:", "Nome do cliente", "Telefone do cliente:", "E-mail do cliente:", "Cidade:", "Rua:"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClientesMouseClicked(evt);
            }
        });
        pnlTabelaClientes.setViewportView(tblClientes);

        javax.swing.GroupLayout pnlClienteLayout = new javax.swing.GroupLayout(pnlCliente);
        pnlCliente.setLayout(pnlClienteLayout);
        pnlClienteLayout.setHorizontalGroup(
            pnlClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClienteLayout.createSequentialGroup()
                .addComponent(pnlCadastroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlTabelaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnlClienteLayout.setVerticalGroup(
            pnlClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCadastroCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlTabelaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirActionPerformed
        try {
            if (campoVazio() == false) {
                c1.setCpfCliente(txtCpf.getText());
                c1.setNomeCliente(txtNome.getText());
                c1.setCelularCliente(txtCelular.getText());
                c1.setEmailCliente(txtEmail.getText());
                c1.setCidadeCliente(txtCidade.getText());
                c1.setRuaCliente(txtRua.getText());
                preencherClientes();
                cic.inserir(c1);
                JOptionPane.showMessageDialog(null, "Inserção feita com sucesso !", " ", JOptionPane.INFORMATION_MESSAGE);
                preencherTabela(null);
                limpar();
                registrarInsercao();
            } else {
                JOptionPane.showMessageDialog(null, "Há campos vazios que devem ser preenchidos", "Há campos vazios", JOptionPane.WARNING_MESSAGE);
                registrarTInsercao();
            }
        } catch (Exception err) {
            JOptionPane.showMessageDialog(null, "Este cpf já existe!!!!", "Erro!!", JOptionPane.ERROR_MESSAGE);
            registrarTInsercao();
        }
    }//GEN-LAST:event_btnInserirActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limpar();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        preencherClientes();
        if (campoVazio() == false) {
            int simNao = JOptionPane.showConfirmDialog(null, "Tem certeza que irá alterar?", "Confirmação", JOptionPane.YES_NO_OPTION);
            if (simNao == 0) {
                String cpfCliente;
                if (tblClientes.getSelectedRow() > -1) {
                    cpfCliente = tblClientes.getValueAt(tblClientes.getSelectedRow(), 0).toString();
                } else {
                    cpfCliente = txtCpf.getText();
                }
                cic.alterar(c1, cpfCliente);
                JOptionPane.showMessageDialog(null, "A alteração foi realizada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                preencherTabela(null);
                limpar();
                registrarAlteracao();
            } else {
                preencherTabela(null);
                limpar();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Há campos vazios", "Erro!", JOptionPane.ERROR_MESSAGE);
            registrarTAlteracao();
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        preencherTabela(null);
    }//GEN-LAST:event_formInternalFrameOpened

    private void tblClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClientesMouseClicked
        if (tblClientes.getSelectedRow() > -1) {
            txtCpf.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 0).toString());
            txtNome.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 1).toString());
            txtCelular.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 2).toString());
            txtEmail.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 3).toString());
            txtCidade.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 4).toString());
            txtRua.setText(tblClientes.getValueAt(tblClientes.getSelectedRow(), 5).toString());
            habilitarBotoes(true);

        } else {

        }
    }//GEN-LAST:event_tblClientesMouseClicked

    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        try{
        if (txtCpf.getText().equals("   .   .   -  ")) {
            JOptionPane.showMessageDialog(null, "Você não adicionou nenhum cpf para remover", "Sem dados!", JOptionPane.ERROR_MESSAGE);
            registrarTRemocao();
        } else {
            int confirma;
            confirma = JOptionPane.showConfirmDialog(null, "Você tem certeza que deseja remover?\n Será permanente", "Confirmação:", JOptionPane.YES_NO_OPTION);
            if (confirma == 0) {
                cic.remover(txtCpf.getText());
                preencherTabela(null);
                limpar();
                registrarRemocao();
            } else {
                preencherTabela(null);
                limpar();
            }
        }
        }catch(RuntimeException err){
            JOptionPane.showMessageDialog(null, "Este cliente, está com uma reserva marcada, exclua a sua reserva primeiro!!", "ALERTA!!!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        if (btnPesquisar.isSelected()) {
            preencherTabela(txtCpf.getText());
            btnPesquisar.setText("Cancelar");
        } else {
            btnPesquisar.setText("Pesquisar");
            preencherTabela(null);
            limpar();
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void txtNomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeKeyReleased
        txtNome.setText(txtNome.getText().toUpperCase());
    }//GEN-LAST:event_txtNomeKeyReleased

    private void txtCidadeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCidadeKeyReleased
        txtCidade.setText(txtCidade.getText().toUpperCase());
    }//GEN-LAST:event_txtCidadeKeyReleased

    private void txtRuaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRuaKeyReleased
        txtRua.setText(txtRua.getText().toUpperCase());
    }//GEN-LAST:event_txtRuaKeyReleased

    private void txtCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCpfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCpfActionPerformed

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        limpar();
    }//GEN-LAST:event_formInternalFrameClosed
    private void limpar() {
        txtCpf.setValue(null);
        txtNome.setText(" ");
        txtCelular.setText(null);
        txtEmail.setText(" ");
        txtCidade.setText(" ");
        txtRua.setText(" ");
        tblClientes.clearSelection();
        habilitarBotoes(false);
    }

    private boolean campoVazio() {
        boolean vazio = false;
        if (txtCpf.getText().equals("   .   .   -  ")
                || txtNome.getText() == null
                || txtCelular.getText().equals("   (  ) 9    -    ")
                || txtEmail.getText() == null
                || txtCidade.getText() == null
                || txtRua.getText() == null) {
            vazio = true;
        }
        return vazio;
    }

    private void preencherTabela(String nomeCliente) {
        ArrayList<Cliente> clientesTabe = cic.pesquisar(nomeCliente);
        DefaultTableModel modelo = (DefaultTableModel) tblClientes.getModel();
        modelo.setNumRows(0);
        for (Cliente c : clientesTabe) {
            modelo.addRow(new String[]{c.getCpfCliente(), c.getNomeCliente(), c.getCelularCliente(), c.getEmailCliente(), c.getCidadeCliente(), c.getRuaCliente()});
        }
        tblClientes.setModel(modelo);

    }

    private void preencherClientes() {
        c1.setCpfCliente(txtCpf.getText());
        c1.setNomeCliente(txtNome.getText());
        c1.setCelularCliente(txtCelular.getText());
        c1.setEmailCliente(txtEmail.getText());
        c1.setCidadeCliente(txtCidade.getText());
        c1.setRuaCliente(txtRua.getText());
    }

    private void habilitarBotoes(boolean habilitar) {
        if (habilitar) {
            btnRemover.setEnabled(true);
            btnAlterar.setEnabled(true);
        } else {
            btnRemover.setEnabled(false);
            btnAlterar.setEnabled(false);
        }
    }
    
    private void preencherRegistro() {
        r.setCpfCliente(c1.getCpfCliente());
        r.setCpfAutor(FrmPrincipal.cpfAutor);
        r.setData(dh.getData());
        r.setHora(dh.getHora());
    }
    
    private void registrarAlteracao() {
        r.setAcaoRegistro("Tentativa de alteração bem-sucedida (Clientes).");
        preencherRegistro();
        reg.registrar(r, dh);
    }
    
    private void registrarTAlteracao() {
        r.setAcaoRegistro("Tentativa de alteração fracassada (Clientes).");
        preencherRegistro();
        reg.registrar(r, dh);
    }
    
    private void registrarRemocao() {
        r.setAcaoRegistro("Tentativa de remoção bem-sucedida (Clientes).");
        preencherRegistro();
        reg.registrar(r, dh);
    }
    private void registrarTRemocao() {
        r.setAcaoRegistro("Tentativa de remoção fracassada (Clientes).");
        preencherRegistro();
        reg.registrar(r, dh);
    }
    private void registrarInsercao() {
        r.setAcaoRegistro("Tentativa de inserção bem-sucedida (Clientes).");
        preencherRegistro();
        reg.registrar(r, dh);
    }
    private void registrarTInsercao() {
        r.setAcaoRegistro("Tentativa de inserção fracassada (Clientes).");
        preencherRegistro();
        reg.registrar(r, dh);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnInserir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JToggleButton btnPesquisar;
    private javax.swing.JButton btnRemover;
    private javax.swing.JLabel lblCelular;
    private javax.swing.JLabel lblCidade;
    private javax.swing.JLabel lblCpf;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblRua;
    private javax.swing.JPanel pnlCadastroCliente;
    private javax.swing.JPanel pnlCliente;
    private javax.swing.JScrollPane pnlTabelaClientes;
    private javax.swing.JTable tblClientes;
    private javax.swing.JFormattedTextField txtCelular;
    private javax.swing.JTextField txtCidade;
    private javax.swing.JFormattedTextField txtCpf;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtRua;
    // End of variables declaration//GEN-END:variables
}
